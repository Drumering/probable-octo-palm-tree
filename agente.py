# --- 1. Importa√ß√µes e Configura√ß√£o Inicial ---
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import os
import logging
import datetime
import pytz
import json

# Importa√ß√µes do Gemini
from google import genai
from google.genai import types

# Importa√ß√µes das Ferramentas do Calendar
from google_calendar_tools import (
    obter_eventos_por_palavra_chave, 
    verificar_disponibilidade, 
    criar_evento, 
    sugerir_horarios,
    TIMEZONE_BRAZIL # Importa a constante do fuso hor√°rio para uso local
)

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Constantes e Vari√°veis Globais
TOKEN_TELEGRAM = os.getenv("TOKEN_TELEGRAM")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") 

client = genai.Client(api_key=GEMINI_API_KEY)
user_context_storage = {} # Mem√≥ria/Estado para racioc√≠nio multi-turno

# --- 2. Schemas e Tools do Gemini ---

AGENDAMENTO_SCHEMA = types.Schema(
    type=types.Type.OBJECT,
    properties={
        "titulo": types.Schema(type=types.Type.STRING, description="O t√≠tulo ou resumo do evento."),
        "data": types.Schema(type=types.Type.STRING, description="A data do evento, SEMPRE no formato 'YYYY-MM-DD'."),
        "hora": types.Schema(type=types.Type.STRING, description="A hora do evento no formato 'HH:MM' (24 horas).")
    },
    required=["titulo", "data", "hora"]
)

CONSULTA_AGENDA_TOOL = types.Tool(
    function_declarations=[
        types.FunctionDeclaration(
            name='obter_eventos_por_palavra_chave',
            description='Busca eventos futuros no calend√°rio com base em uma palavra-chave (ex: "almo√ßo", "reuni√£o").',
            parameters=types.Schema(
                type=types.Type.OBJECT,
                properties={
                    'keyword': types.Schema(type=types.Type.STRING, description='A palavra-chave de busca.')
                },
                required=['keyword']
            )
        )
    ]
)

# --- 3. Fun√ß√µes de Racioc√≠nio (Gemini Logic) ---

def analisar_e_decidir_acao_com_gemini(texto: str) -> dict | None:
    """
    Usa o Gemini para analisar a inten√ß√£o (agendar/consultar) e extrair os par√¢metros.

    Args:
        texto: A mensagem de entrada do usu√°rio.

    Retorna:
        Um dicion√°rio JSON com a decis√£o ('action') e os par√¢metros, ou None em caso de erro.
    """
    today_date = datetime.date.today().strftime('%Y-%m-%d')
    
    prompt = (
        f"A data atual √© {today_date}. Analise o pedido do usu√°rio: '{texto}'. "
        "DECIDA se a inten√ß√£o √© 'agendar', 'consultar' ou 'verificar'. "
        "Se a inten√ß√£o for 'consultar', extraia APENAS o assunto principal do evento (ex: 'almo√ßo', 'reuni√£o'). "
        "Se a inten√ß√£o for 'agendar' ou 'verificar', converta a data para YYYY-MM-DD. "
        "Sua resposta DEVE ser um JSON que inclui o campo 'action'."
    )
    
    try:
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            config=types.GenerateContentConfig(
                response_mime_type="application/json",
                response_schema=types.Schema(
                    type=types.Type.OBJECT,
                    properties={
                        'action': types.Schema(type=types.Type.STRING, description='A a√ß√£o principal: "agendar", "consultar" ou "verificar".'),
                        'agendamento': AGENDAMENTO_SCHEMA,
                        'consulta': types.Schema(type=types.Type.STRING, description='A palavra-chave para consulta, se a a√ß√£o for "consultar".')
                    },
                    required=['action']
                ),
            ),
        )
        return json.loads(response.text)
    except Exception as e:
        logging.error(f"Erro ao chamar a API do Gemini: {e}")
        return None


# --- 4. Fun√ß√µes de Execu√ß√£o das A√ß√µes ---

async def execute_consulta(update: Update, context: ContextTypes.DEFAULT_TYPE, keyword: str):
    """
    Executa a l√≥gica de consulta (busca) no calend√°rio.
    """
    chat_id = update.effective_chat.id
    
    if not keyword:
        await context.bot.send_message(chat_id=chat_id, text="N√£o consegui extrair a palavra-chave para consulta.")
        return

    eventos = obter_eventos_por_palavra_chave(keyword)
    
    if eventos:
        response_text = f"Encontrei os seguintes eventos futuros sobre '{keyword}':\n\n"
        for event in eventos:
            response_text += f"üìÖ {event['titulo']} - {event['data_hora']}\n"
    else:
        response_text = f"N√£o encontrei eventos futuros para '{keyword}'."
    
    await context.bot.send_message(chat_id=chat_id, text=response_text)


async def execute_agendamento(update: Update, context: ContextTypes.DEFAULT_TYPE, entidades: dict):
    """
    Executa a l√≥gica principal de agendamento (Valida√ß√£o, Verifica√ß√£o, Cria√ß√£o).
    Lida com o fluxo multi-turno de sugest√£o de hor√°rios.
    """
    chat_id = update.effective_chat.id
    
    try:
        # 1. Valida√ß√£o e Formata√ß√£o Inicial
        if not entidades or not entidades.get('titulo') or not entidades.get('hora'):
            raise ValueError("Dados incompletos do Gemini.")

        resumo = entidades["titulo"]
        data_alvo_str = entidades["data"].strip()

        data_alvo = datetime.datetime.strptime(data_alvo_str, '%Y-%m-%d').date()
        hora, minuto = map(int, entidades["hora"].split(':'))
        fuso_brasil = pytz.timezone(TIMEZONE_BRAZIL)

        # 2. Formata√ß√£o ISO com Fuso Hor√°rio
        # Assume 1 hora de dura√ß√£o padr√£o para o evento
        inicio_com_fuso = fuso_brasil.localize(datetime.datetime.combine(data_alvo, datetime.time(hora, minuto)))
        fim_com_fuso = inicio_com_fuso + datetime.timedelta(hours=1)
        inicio_iso = inicio_com_fuso.isoformat()
        fim_iso = fim_com_fuso.isoformat()

    except Exception as e:
        logging.error(f"Erro na convers√£o de dados do agendamento: {e}")
        await context.bot.send_message(chat_id=chat_id, text="Houve um erro na convers√£o dos dados do agendamento. Tente um formato de data/hora mais claro.")
        return

    # 3. A√á√ÉO: Verificar Disponibilidade
    disponivel = verificar_disponibilidade(inicio_iso, fim_iso)

    if disponivel:
        # 3.1. Criar Evento Imediatamente
        link_evento = criar_evento(resumo, inicio_iso, fim_iso)
        texto_resposta = (
            f"‚úÖ Perfeito! O evento '{resumo}' foi agendado para "
            f"{data_alvo.strftime('%d/%m/%Y')} √†s {inicio_com_fuso.strftime('%H:%M')}. "
            f"Veja no seu calend√°rio: {link_evento}"
        )
    else:
        # 3.2. Sugerir Hor√°rios (Inicia o fluxo Multi-Turno)
        sugestoes = sugerir_horarios(inicio_iso, fim_iso)
        if sugestoes:
            suggestion_map = {}
            numbered_suggestions = []
            for i, iso_time in enumerate(sugestoes):
                dt_obj = datetime.datetime.fromisoformat(iso_time)
                suggestion_map[f"{i + 1}"] = iso_time
                numbered_suggestions.append(f"({i + 1}) √†s {dt_obj.strftime('%H:%M')}")
            
            # Salva o contexto na mem√≥ria
            user_context_storage[chat_id] = {'summary': resumo, 'suggestions': suggestion_map}
            
            sugestoes_str = ' ou '.join(numbered_suggestions)
            texto_resposta = (
                f"‚ùå O hor√°rio solicitado ({inicio_com_fuso.strftime('%H:%M')}) est√° ocupado. "
                f"Que tal uma dessas op√ß√µes: {sugestoes_str}? "
                f"Responda com o n√∫mero da op√ß√£o desejada (ex: '1')."
            )
        else:
            texto_resposta = "‚ùå O hor√°rio solicitado est√° ocupado e n√£o consegui encontrar hor√°rios livres pr√≥ximos."

    await context.bot.send_message(chat_id=chat_id, text=texto_resposta)

async def execute_verificacao(update: Update, context: ContextTypes.DEFAULT_TYPE, entidades: dict):
    """
    Executa a l√≥gica de verifica√ß√£o de disponibilidade em um hor√°rio espec√≠fico.
    """
    chat_id = update.effective_chat.id
    
    try:
        # 1. Valida√ß√£o e Formata√ß√£o Inicial (o mesmo do agendamento)
        if not entidades or not entidades.get('data') or not entidades.get('hora'):
            raise ValueError("Dados de data/hora incompletos do Gemini.")

        data_alvo_str = entidades["data"].strip()
        data_alvo = datetime.datetime.strptime(data_alvo_str, '%Y-%m-%d').date()
        hora, minuto = map(int, entidades["hora"].split(':'))
        fuso_brasil = pytz.timezone(TIMEZONE_BRAZIL)

        # 2. Formata√ß√£o ISO com Fuso Hor√°rio (Assume 1 hora de dura√ß√£o padr√£o para a verifica√ß√£o)
        inicio_com_fuso = fuso_brasil.localize(datetime.datetime.combine(data_alvo, datetime.time(hora, minuto)))
        fim_com_fuso = inicio_com_fuso + datetime.timedelta(hours=1)
        inicio_iso = inicio_com_fuso.isoformat()
        fim_iso = fim_com_fuso.isoformat()

    except Exception as e:
        logging.error(f"Erro na convers√£o de dados da verifica√ß√£o: {e}")
        await context.bot.send_message(chat_id=chat_id, text="Houve um erro na convers√£o da data/hora. Tente um formato mais claro.")
        return

    # 3. A√á√ÉO: Verificar Disponibilidade
    disponivel = verificar_disponibilidade(inicio_iso, fim_iso)
    
    # 4. Construir Resposta
    data_formatada = inicio_com_fuso.strftime('%d/%m √†s %H:%M')

    if disponivel:
        texto_resposta = f"‚úÖ **Confirmado!** Voc√™ est√° livre no dia {data_formatada}."
    else:
        # Sugere hor√°rios alternativos se o principal estiver ocupado
        sugestoes = sugerir_horarios(inicio_iso, fim_iso)
        
        if sugestoes:
            suggestion_map = {}
            numbered_suggestions = []
            for i, iso_time in enumerate(sugestoes):
                dt_obj = datetime.datetime.fromisoformat(iso_time)
                suggestion_map[f"{i + 1}"] = iso_time
                numbered_suggestions.append(f"({i + 1}) √†s {dt_obj.strftime('%H:%M')}")

            # Salva o contexto na mem√≥ria
            user_context_storage[chat_id] = {
                'action': 'awaiting_time_selection',
                'suggestions': suggestion_map
            }

            sugestoes_str = ' ou '.join(numbered_suggestions)
            texto_resposta = (
                f"‚ùå Ocupado. Voc√™ tem compromisso no dia {data_formatada}. "
                f"Encontrei disponibilidade para: {sugestoes_str}."
                f"**Responda com o n√∫mero da op√ß√£o desejada para agendar o evento.**"
            )
        else:
            texto_resposta = (
                f"‚ùå Ocupado. Voc√™ tem compromisso no dia {data_formatada} e n√£o encontrei hor√°rios livres nas horas seguintes."
            )

    await context.bot.send_message(chat_id=chat_id, text=texto_resposta)

# --- 5. Handlers do Telegram ---

async def iniciar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para o comando /start: mensagem de boas-vindas."""
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="Ol√°! Eu sou o seu agente de agendamento e consulta de calend√°rio. Estou pronto para te ajudar!"
    )


async def handle_follow_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handler multi-turno: Processa a resposta do usu√°rio (um n√∫mero) a uma sugest√£o de hor√°rio.
    Unifica a l√≥gica de agendamento e verifica√ß√£o.
    """
    chat_id = update.effective_chat.id
    user_response = update.message.text.strip()
    
    if chat_id not in user_context_storage:
        return False # Sem contexto, passa para o pr√≥ximo handler
        
    context_data = user_context_storage[chat_id]
    action = context_data.get('action')

    # TRATAMENTO DE SELE√á√ÉO DE HOR√ÅRIO (Estado: awaiting_time_selection)
    if action == 'awaiting_time_selection' and user_response.isdigit():
        suggestions = context_data['suggestions']
        
        if user_response in suggestions:
            chosen_iso_time = suggestions[user_response]
            
            # --- L√≥gica de Transi√ß√£o: Agendamento Original vs. Verifica√ß√£o ---
            
            # Se o RESUMO/T√çTULO j√° existe (veio de um comando 'agendar' original), agenda imediatamente.
            if 'summary' in context_data:
                summary = context_data['summary']
                
                chosen_start_dt = datetime.datetime.fromisoformat(chosen_iso_time)
                chosen_end_dt = (chosen_start_dt + datetime.timedelta(hours=1)).isoformat()
                link = criar_evento(summary, chosen_iso_time, chosen_end_dt)
                
                del user_context_storage[chat_id]
                
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ Agendamento Confirmado! O evento '{summary}' foi marcado para as {chosen_start_dt.strftime('%H:%M')}. Veja: {link}"
                )
                return True # Finaliza o agendamento
                
            # Se o RESUMO/T√çTULO N√ÉO existe (veio de um comando 'verificar'), pede o t√≠tulo.
            else:
                # ATUALIZA O ESTADO para AWAITING_TITLE, armazenando o hor√°rio escolhido
                user_context_storage[chat_id] = {
                    'action': 'awaiting_title',
                    'chosen_time_iso': chosen_iso_time,
                }
                
                # Pede o t√≠tulo do evento
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="√ìtimo! Hor√°rio selecionado. Agora, **qual ser√° o t√≠tulo/resumo** deste evento?"
                )
                return True # Processamento multi-turno completo
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="Op√ß√£o inv√°lida. Por favor, responda apenas com o n√∫mero da op√ß√£o (ex: '1', '2', etc.)."
            )
            return True
    
    return False # Passa para o pr√≥ximo handler se n√£o for uma sele√ß√£o num√©rica v√°lida


async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handler geral: Processa todas as mensagens de texto.
    Usa o Gemini para decidir a inten√ß√£o e encaminha a a√ß√£o.
    """
    full_message = update.message.text
    chat_id = update.effective_chat.id

    # 1. VERIFICA√á√ÉO DE ESTADO MULTI-TURNO: AWAITING TITLE
    if chat_id in user_context_storage:
        context_data = user_context_storage[chat_id]
        if context_data.get('action') == 'awaiting_title':
            
            # A√á√ÉO: Finalizar o Agendamento com T√≠tulo Fornecido
            summary = full_message # O texto do usu√°rio √© o novo t√≠tulo
            chosen_iso_time = context_data['chosen_time_iso']

            chosen_start_dt = datetime.datetime.fromisoformat(chosen_iso_time)
            chosen_end_dt = (chosen_start_dt + datetime.timedelta(hours=1)).isoformat()
            
            link = criar_evento(summary, chosen_iso_time, chosen_end_dt)
            
            # Limpa a mem√≥ria para o pr√≥ximo comando
            del user_context_storage[chat_id]
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ Agendamento Confirmado! O evento '{summary}' foi marcado para as {chosen_start_dt.strftime('%H:%M')}. Veja: {link}"
            )
            return # Processamento multi-turno completo, n√£o continua para o Gemini.

    # 2. RACIOC√çNIO: Decis√£o de A√ß√£o (Gemini)
    decision = analisar_e_decidir_acao_com_gemini(full_message)
    
    if not decision:
        await context.bot.send_message(chat_id=chat_id, text="N√£o consegui processar sua solicita√ß√£o. Tente de novo.")
        return

    action = decision.get('action')

    if action == 'agendar':
        # 2.1. A√á√ÉO: Executa a l√≥gica de AGENDAMENTO
        await execute_agendamento(update, context, decision.get('agendamento'))

    elif action == 'verificar':
        # 2.2. A√á√ÉO: Executa a l√≥gica de VERIFICA√á√ÉO
        await execute_verificacao(update, context, decision.get('agendamento'))
        
    elif action == 'consultar':
        # 2.3. A√á√ÉO: Executa a l√≥gica de CONSULTA
        await execute_consulta(update, context, decision.get('consulta'))
        
    else:
        # Resposta padr√£o se o Gemini retornar uma a√ß√£o desconhecida ou vazia
        await context.bot.send_message(
            chat_id=chat_id, 
            text="Desculpe, n√£o entendi se voc√™ quer agendar ou consultar um evento. Tente 'Agende X' ou 'Qual √© o meu X'."
        )


# --- 6. Configura√ß√£o Principal do App ---

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN_TELEGRAM).build()

    # Handlers de Comando
    app.add_handler(CommandHandler('start', iniciar_handler))

    # Handlers de Mensagens (Ordem crucial: follow-up > geral)
    # 1. Handler para respostas num√©ricas (racioc√≠nio multi-turno)
    # filters.Regex(r'^\d+$') garante que apenas n√∫meros sejam processados aqui.
    app.add_handler(MessageHandler(filters.Regex(r'^\d+$') & (~filters.COMMAND), handle_follow_up))
    
    # 2. Handler geral para o racioc√≠nio de inten√ß√£o (Gemini)
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_messages))

    app.run_polling()